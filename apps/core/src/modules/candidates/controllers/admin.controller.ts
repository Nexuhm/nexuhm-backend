import {
  Body,
  Controller,
  DefaultValuePipe,
  Get,
  Param,
  ParseIntPipe,
  Post,
  Query,
  UseGuards,
} from '@nestjs/common';
import { CandidateService } from '../services/candidate.service';
import { CreateCandidateNoteDto } from '../dto/create-candidtae-note.dto';
import { JwtAuthGuard } from '@/core/modules/auth/guards/jwt.guard';
import { User } from '@/core/lib/decorators/user.decorator';
import { HttpService } from '@nestjs/axios';
import { lastValueFrom } from 'rxjs';
import { UserDocument } from '../../users/schemas/user.schema';
import { google } from 'googleapis';
import { InjectModel } from '@nestjs/mongoose';
import { UserIntegration } from '../../users/schemas/user-integration.schema';
import { Model } from 'mongoose';

@UseGuards(JwtAuthGuard)
@Controller('/admin/candidates')
export class AdminCandidateController {
  constructor(
    private candidateSevrice: CandidateService,
    private httpService: HttpService,
    @InjectModel(UserIntegration.name)
    private integrationModel: Model<UserIntegration>,
  ) {}

  @Get('/')
  async getCandidates(
    @Query('limit', new DefaultValuePipe(15), new ParseIntPipe()) limit: number,
    @Query('skip', new DefaultValuePipe(0), new ParseIntPipe()) skip: number,
    @Query('job') job?: string,
  ) {
    const filters = job ? { job } : {};

    const data = await this.candidateSevrice
      .find(filters)
      .limit(limit)
      .skip(skip)
      .populate('job', 'title')
      .populate('lastNote');

    const totalCount = await this.candidateSevrice.count(filters);

    return {
      data,
      totalCount,
    };
  }

  @Get('/:id')
  async getCandidate(@Param('id') candidateId) {
    return this.candidateSevrice.findById(candidateId);
  }

  @Get('/:id/notes')
  async getCandidateNotes(@Param('id') candidateId) {
    return this.candidateSevrice.getNotes(candidateId);
  }

  @Post('/:id/notes')
  async addCandidateNote(
    @User() user,
    @Param('id') candidateId,
    @Body() body: CreateCandidateNoteDto,
  ) {
    return this.candidateSevrice.createNote(candidateId, user, body.note);
  }

  @Post('/:id/reject')
  async rejectCandidate(@Param('id') candidateId) {
    return this.candidateSevrice.rejectCandidate(candidateId);
  }

  @Post('/:id/schedule')
  async scheduleMeeting(@Param('id') candidateId, @User() user: UserDocument) {
    const candidate = await this.candidateSevrice.findById(candidateId);
    const googleIntegration = await this.integrationModel
      .findOne({
        _id: {
          $in: user.integrations,
        },
        type: 'google',
      })
      .sort('-createdAt');

    console.log(googleIntegration);

    const oAuth2Client = new google.auth.OAuth2();

    oAuth2Client.setCredentials({
      access_token: googleIntegration?.accessToken,
    });

    const calendar = google.calendar({
      version: 'v3',
      auth: oAuth2Client,
    });

    const subject = `Interview Meeting with ${candidate?.firstname} ${candidate?.lastname}`;

    const event = {
      summary: subject,
      description: 'Generated by Nexhum',
      start: {
        dateTime: '2024-04-30T12:00:00-07:00',
        timeZone: 'America/Los_Angeles',
      },
      end: {
        dateTime: '2024-04-30T14:00:00-07:00',
        timeZone: 'America/Los_Angeles',
      },
      attendees: [
        {
          email: candidate?.email,
        },
      ],
      reminders: {
        useDefault: false,
        overrides: [
          { method: 'email', minutes: 24 * 60 },
          { method: 'popup', minutes: 10 },
        ],
      },
    };

    const res = await calendar.events.insert(
      {
        auth: oAuth2Client,
        calendarId: 'primary',
        requestBody: event,
      },
      {
        responseType: 'json',
      },
    );

    return res;
  }

  // TODO: MS integration
  // @Post('/:id/reject')
  // async scheduleMeeting(@Param('id') candidateId, @User() user: UserDocument) {
  //   const candidate = await this.candidateSevrice.findById(candidateId);
  //   const microsoftIntegration = user.integrations.find(
  //     (i) => i.type === 'microsoft',
  //   );

  //   const meetingDetails = {
  //     subject: `Interview Meeting with ${candidate?.firstname} ${candidate?.lastname}`,
  //     body: {
  //       contentType: 'HTML',
  //       content: 'Discuss our strategy for the next quarter.',
  //     },
  //     start: {
  //       dateTime: '2024-04-30T12:00:00',
  //       timeZone: 'Pacific Standard Time',
  //     },
  //     end: {
  //       dateTime: '2024-04-30T14:00:00',
  //       timeZone: 'Pacific Standard Time',
  //     },
  //     attendees: [
  //       {
  //         emailAddress: {
  //           address: candidate?.email,
  //           name: `${candidate?.firstname} ${candidate?.lastname}`,
  //         },
  //         type: 'required',
  //       },
  //     ],
  //     location: {
  //       displayName: `Interview Meeting with ${candidate?.firstname} ${candidate?.lastname}`,
  //     },
  //   };

  //   const response = this.httpService.post(
  //     'https://graph.microsoft.com/v1.0/me/events',
  //     meetingDetails,
  //     {
  //       headers: {
  //         Authorization: `Bearer ${microsoftIntegration?.accessToken}`,
  //         'Content-Type': 'application/json',
  //       },
  //     },
  //   );

  //   return lastValueFrom(response);
  // }
}
